{"version":3,"sources":["../src/App.ts"],"names":[],"mappings":"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","file":"App.js","sourcesContent":["import * as path from 'path';\r\nimport * as express from 'express';\r\nimport * as logger from 'morgan';\r\nimport * as url from 'url';\r\nimport * as bodyParser from 'body-parser';\r\nimport * as session from 'express-session';\r\n\r\n// services\r\nvar FieldService = require('./services/field-service');\r\nvar FieldTypeService = require('./services/fieldType-service');\r\nvar RequestService = require('./services/request-service');\r\nvar SportService = require('./services/sport-service');\r\n\r\n// SSO\r\nimport FacebookPassportObj from './sso-config/FacebookPassport';\r\n\r\nlet passport = require('passport');\r\n\r\n// Creates and configures an ExpressJS web server.\r\nclass App {\r\n\r\n  // ref to Express instance\r\n  public express: express.Application;\r\n  public facebookPassportObj:FacebookPassportObj;\r\n\r\n  //Run configuration methods on the Express instance.\r\n  constructor() {\r\n    this.facebookPassportObj = new FacebookPassportObj();\r\n    this.express = express();\r\n    this.middleware();\r\n    this.routes();\r\n  }\r\n\r\n  // Configure Express middleware.\r\n  private middleware(): void {\r\n    /*this.express.use(function (req, res, next) {\r\n      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\r\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n      res.header('access-Control-Allow-Origin', '*');\r\n      next();\r\n    });*/\r\n\r\n    this.express.use(logger('dev'));\r\n    this.express.use(bodyParser.json());\r\n    this.express.use(bodyParser.urlencoded({ extended: false }));\r\n    this.express.use(session({ secret: 'keyboard cat' }));\r\n    this.express.use(passport.initialize());\r\n    this.express.use(passport.session());\r\n  }\r\n\r\n  private validateAuth(req, res, next):void {\r\n    if (req.isAuthenticated()) { return next(); }\r\n        res.send(req.user);\r\n  }\r\n\r\n  // Configure API endpoints.\r\n  private routes(): void {\r\n    let router = express.Router();\r\n\r\n    router.get('/auth/facebook',\r\n        passport.authenticate('facebook',\r\n            {scope: ['public_profile', 'email'] }\r\n        )\r\n    );\r\n\r\n    router.get('/auth/facebook/callback',\r\n        passport.authenticate('facebook',\r\n            { failureRedirect: '/'}),\r\n            function(req, res) {\r\n                let options = {\r\n                    maxAge: 1000 * 60 * 60 * 24, // would expire after 1 day\r\n                    signed: false // Indicates if the cookie should be signed\r\n                }\r\n\r\n                // Set cookie\r\n                res.cookie('User', passport.session.user, options); // options is optional\r\n                res.redirect('/#/home');\r\n            }\r\n    );\r\n\r\n    // Field Routes\r\n    // getting available fields\r\n    // query parameters: date, time, city, state, duration\r\n    router.get('/api/fields/', (req, res) => {\r\n        var urlParts = url.parse(req.url, true);\r\n        var query = urlParts.query;\r\n        var date = query.date;\r\n        var time = query.time;\r\n        var city = query.city;\r\n        var state = query.state;\r\n        var duration = query.duration;\r\n\r\n        var msg = 'search for ' + query.var1;\r\n        FieldService.retrieveAvailableFields(res, date, time, city, state, duration);\r\n        return res;\r\n    });\r\n\r\n    // posting new fields\r\n    router.post('/api/fields/', (req, res) => {\r\n        var jsonObj = req.body;\r\n        var id = FieldService.addNewField(jsonObj);\r\n    });\r\n\r\n    // editing fields\r\n    router.put('/api/fields/:fieldId', (req, res) => {\r\n        var jsonObj = req.body;\r\n        var id = FieldService.updateField(jsonObj);\r\n    });\r\n\r\n\r\n    // Request Routes\r\n    // getting all requests for admin\r\n    router.get('/api/request/admin/:adminId', (req, res) => {\r\n        var adminId = req.params.adminId;\r\n        RequestService.retrieveRequests(res, adminId);\r\n        return res;\r\n    });\r\n\r\n    // getting all requests for user\r\n    router.get('/api/request/user/:userId', (req, res) => {\r\n        var userId = req.params.userId;\r\n        RequestService.retrieveUserRequests(res, userId);\r\n        return res;\r\n    });\r\n\r\n    // getting details of a single request\r\n    router.get('/api/request/details', (req, res) => {\r\n        var urlParts = url.parse(req.url, true);\r\n        RequestService.retrieveRequestDetails(res, {requestId: urlParts.query.requestId});\r\n        return res;\r\n    });\r\n\r\n    // getting all requests for one field\r\n    router.get('/api/request/field/:fieldId', (req, res) => {\r\n        var fieldId = req.params.fieldId;\r\n        RequestService.retrieveRequests(res, fieldId);\r\n        return res;\r\n    });\r\n\r\n    // adding a new field request\r\n    router.post('/api/request/:userId', (req, res) => {\r\n        var userId = req.params.userId;\r\n        var jsonObj = req.body;\r\n        RequestService.addRequest(res, jsonObj);\r\n        return res;\r\n    });\r\n\r\n\r\n    // updating request status\r\n    router.put('/api/request', (req, res) => {\r\n        var jsonObj = req.body;\r\n        var id = RequestService.setRequestStatus(res, jsonObj);\r\n        return res;\r\n    });\r\n\r\n    // Field Type Routes\r\n    // Get field types\r\n    router.get('/api/fieldType/', (req, res) => {\r\n        FieldTypeService.retrieveAllFieldTypes(res);\r\n    });\r\n\r\n    // Sport Routes\r\n    // Get Sport types\r\n    router.get('/api/sport/', (req, res) => {\r\n        SportService.retrieveAllSports(res);\r\n    });\r\n\r\n    this.express.use('/', express.static(__dirname+'/static_files'));\r\n    this.express.use('/', router);\r\n  }\r\n\r\n}\r\n\r\nexport default new App().express;"],"sourceRoot":"."}